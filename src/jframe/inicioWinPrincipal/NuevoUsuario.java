/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jframe.inicioWinPrincipal;

import jframe.menuPrincipal.date;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import jframe.menuPrincipal.MiRenderer;

/**
 *
 * @author Gustavo
 */
public final class NuevoUsuario extends javax.swing.JFrame {

    date date = new date();
    String user = System.getProperty("user.name");
    File fichero2 = new File("C:\\Users\\" + user + "\\Documents\\NetBeansProjects\\JFrame\\src\\file\\entrada.csv");
    File fichero = new File("C:\\Users\\" + user + "\\Documents\\NetBeansProjects\\JFrame\\src\\file\\user.csv");
    File fichero_temporal = new File("C:\\Users\\" + user + "\\Documents\\NetBeansProjects\\JFrame\\src\\file\\temporal.csv");
    ArrayList<String> prueba = new ArrayList();

    /**
     * Creates new form NuevoUsuario
     */
    public NuevoUsuario() {
        MiRenderer m = new MiRenderer();
        initComponents();
        ficheroApp();
        this.setTitle("Crear Usuarios");
        this.setLocationRelativeTo(NuevoUsuario.this);
        setIconImage(new ImageIcon(getClass().getResource("/img/IconoJFrame.png")).getImage());
        this.getContentPane().setBackground(new Color(243, 233, 147));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setResizable(true);
        modificarFileEntrada();
        NumPersonas();
        MostrarTabla();
        datos();
        tablaUsuarios.getTableHeader().setFont(new Font("Courier New", 1, 18));
        tablaUsuarios.getTableHeader().setBackground(Color.blue);
        tablaUsuarios.getTableHeader().setForeground(Color.white);
        tablaUsuarios.getTableHeader().setPreferredSize(new java.awt.Dimension(50, 50));
        tablaUsuarios.setRowHeight(30);
        tablaUsuarios.setRowMargin(10);

        for (int i = 0; i < tablaUsuarios.getColumnCount(); i++) {
            tablaUsuarios.getColumnModel().getColumn(i).setCellRenderer(m);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCategoria = new javax.swing.JTextField();
        txtNombreUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtContrasena = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        NumPersonas = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        btnMenu = new javax.swing.JMenu();
        btnGuardar = new javax.swing.JMenuItem();
        btnGuardarModificacionMenu = new javax.swing.JMenuItem();
        btnEliminar = new javax.swing.JMenuItem();
        btnActualizar = new javax.swing.JMenuItem();
        btnLimpiarMenu = new javax.swing.JMenuItem();
        btnSalirMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(243, 233, 147));

        tablaUsuarios.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaUsuarios.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categoria", "Nombre Usuario", "Contraseña", "Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaUsuarios.setSelectionBackground(new java.awt.Color(153, 204, 255));
        tablaUsuarios.getTableHeader().setReorderingAllowed(false);
        tablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaUsuarios);

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Usuarios");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        jLabel6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(204, 153, 0));

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel2.setText("Categoría:");

        jLabel4.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel4.setText("Nombre Usuario:");

        txtCategoria.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtCategoria.setBorder(null);

        txtNombreUsuario.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtNombreUsuario.setBorder(null);

        jLabel3.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel3.setText("Id:");

        jLabel5.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel5.setText("Contraseña:");

        txtContrasena.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtContrasena.setBorder(null);

        txtId.setEditable(false);
        txtId.setBackground(new java.awt.Color(255, 255, 255));
        txtId.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtId.setBorder(null);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel9.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 255));
        jLabel9.setText("Personas dentro de Planta:");
        jLabel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        NumPersonas.setEditable(false);
        NumPersonas.setBackground(new java.awt.Color(255, 255, 255));
        NumPersonas.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        NumPersonas.setForeground(new java.awt.Color(204, 0, 0));
        NumPersonas.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NumPersonas.setToolTipText("<html>Número de personas<br/>que hay dentro de planta.</html>");
        NumPersonas.setBorder(null);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NumPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NumPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenuBar1.setBorder(null);
        jMenuBar1.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N

        btnMenu.setBorder(null);
        btnMenu.setForeground(new java.awt.Color(0, 0, 255));
        btnMenu.setMnemonic('m');
        btnMenu.setText("Menú");
        btnMenu.setToolTipText("<html>Menú principal<br/>Tambien se puede usar Alt + m</html>");
        btnMenu.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N

        btnGuardar.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(0, 0, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(null);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        btnMenu.add(btnGuardar);

        btnGuardarModificacionMenu.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        btnGuardarModificacionMenu.setForeground(new java.awt.Color(0, 0, 255));
        btnGuardarModificacionMenu.setText("Guardar Modificación");
        btnGuardarModificacionMenu.setBorder(null);
        btnGuardarModificacionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarModificacionMenuActionPerformed(evt);
            }
        });
        btnMenu.add(btnGuardarModificacionMenu);

        btnEliminar.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(0, 0, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(null);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        btnMenu.add(btnEliminar);

        btnActualizar.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(0, 0, 255));
        btnActualizar.setText("Actualizar");
        btnActualizar.setBorder(null);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        btnMenu.add(btnActualizar);

        btnLimpiarMenu.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        btnLimpiarMenu.setForeground(new java.awt.Color(0, 0, 255));
        btnLimpiarMenu.setText("Limpiar");
        btnLimpiarMenu.setBorder(null);
        btnLimpiarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarMenuActionPerformed(evt);
            }
        });
        btnMenu.add(btnLimpiarMenu);

        btnSalirMenu.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        btnSalirMenu.setForeground(new java.awt.Color(255, 0, 0));
        btnSalirMenu.setMnemonic('s');
        btnSalirMenu.setText("Salir");
        btnSalirMenu.setToolTipText("<html>Pulsar para salir<br/>Tambien se puede usar Alt + s<br/>y a continuación entrer</html>");
        btnSalirMenu.setBorder(null);
        btnSalirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirMenuActionPerformed(evt);
            }
        });
        btnMenu.add(btnSalirMenu);

        jMenuBar1.add(btnMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ficheroApp() {
        if (!fichero.exists()) {
            JOptionPane.showMessageDialog(null, "\nHay un error en los fichero\nhable con el administrador.");
            return;
        }
    }

     public void NumPersonas() {
        String line;
        int i = 0;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fichero2));
            while ((line = br.readLine()) != null) {
                String[] numPersonas = line.split(";");
                if (numPersonas[2].equals("DENTRO")) {
                    i++;
                    String numPersonasString = String.valueOf(i);
                    NumPersonas.setText(numPersonasString);
                } else {
                    String SinPersonasString = String.valueOf(i);
                    NumPersonas.setText(SinPersonasString);
                }
            }
            br.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "\nError: " + e);
        }
    }
    
    public void datos() {
        String line2;
        int i = 0;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fichero));
            while ((line2 = br.readLine()) != null) {
                i++;
                String id = String.valueOf(i);
                txtId.setText(id);
            }
            br.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "\nError: " + e);
        }
    }

    public void MostrarTabla() {
        String line;
        int i = 0;
        BufferedReader br = null;
        DefaultTableModel model = (DefaultTableModel) tablaUsuarios.getModel();
        TableRowSorter<TableModel> elQueOrdena = new TableRowSorter<TableModel>(model);
        model.setRowCount(0);
        model.setRowCount(0);
        try {
            br = new BufferedReader(new FileReader(fichero));
            while ((line = br.readLine()) != null) {
                String[] tabla = line.split(";");
                if (!tabla[0].equalsIgnoreCase("")) {
                    tablaUsuarios.setRowSorter(elQueOrdena);
                    Vector row = new Vector();
                    row.add(tabla[0]);
                    row.add(tabla[1]);
                    row.add(tabla[2]);
                    row.add(tabla[3]);
                    model.addRow(row);
                }
            }
            br.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "\nError: " + e);
        }
    }

    public void LimpiarCasillas() {
        txtCategoria.setText(null);
        txtNombreUsuario.setText(null);
        txtContrasena.setText(null);
        txtId.setText(null);
    }

    public void GuardarNuevoId() {
        try {
            String line;
            BufferedReader br = null;
            br = new BufferedReader(new FileReader(fichero));
            while ((line = br.readLine()) != null) {
                String[] busqueda = line.split(";");
                if (txtId.getText().equals(busqueda[3])) {
                    JOptionPane.showMessageDialog(null, "\nEste Id ya existe.");
                    br.close();
                    return;
                }else  if (txtNombreUsuario.getText().equals(busqueda[1])) {
                    JOptionPane.showMessageDialog(null, "\nEste usuario ya existe.");
                    br.close();
                    return;
                    }else  if (txtContrasena.getText().equals(busqueda[2])) {
                    JOptionPane.showMessageDialog(null, "\nEsta contraseña ya existe.");
                    br.close();
                    return;
                }else if (txtCategoria.getText().equals("")
                        || txtNombreUsuario.getText().equals("")
                        || txtContrasena.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "\nFaltan campos por rellenar.");
                    br.close();
                    return;
                }
            }
            br.close();
            GuardarEntradaNueva();
            LimpiarCasillas();
            MostrarTabla();
            datos();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, date.fecha() + "\nError: " + e);
        }

    }

    public void GuardarEntradaNueva() {
        BufferedReader br = null;
        String line;
        int d = 0;
        try {
            BufferedWriter bw = null;
            br = new BufferedReader(new FileReader(fichero));
            bw = new BufferedWriter(new FileWriter(fichero, true));
            DefaultTableModel model = (DefaultTableModel) tablaUsuarios.getModel();
            model.setRowCount(0);
            model.setRowCount(0);
            if ((line = br.readLine()) != null) {
                String[] busqueda = line.split(";");
                d++;

                String Categoria = txtCategoria.getText();
                busqueda[0] = Categoria;

                String NombreUsuario = txtNombreUsuario.getText();
                busqueda[1] = NombreUsuario;

                String Contrasena = txtContrasena.getText();
                busqueda[2] = Contrasena;

                String id = txtId.getText();
                busqueda[3] = id;
                bw.write(busqueda[0] + ';' + busqueda[1] + ';' + busqueda[2] + ';' + busqueda[3] + "\n");
            }
            bw.flush();
            br.close();
            bw.close();
            if (d == 0) {
                JOptionPane.showMessageDialog(null, "\nNo se pueden guardar los datos.");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, date.fecha() + "\nError: " + e);
        }
    }

    public void Seleccionar() {
        if (tablaUsuarios.getSelectedRowCount() > 0) {
            txtCategoria.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 0).toString());
            txtNombreUsuario.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 1).toString());
            txtContrasena.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 2).toString());
            txtId.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 3).toString());
        }
    }

    public void GuardarModificaciones() {
        int i = 0;
        try {
            String line;
            String categoria = txtCategoria.getText();
            String nombreUsuario = txtNombreUsuario.getText();
            String contrasena = txtContrasena.getText();
            String id = txtId.getText();
            BufferedReader br = null;
            BufferedWriter bw = null;
            br = new BufferedReader(new FileReader(fichero));
            bw = new BufferedWriter(new FileWriter(fichero_temporal));

            while ((line = br.readLine()) != null) {
                String[] busqueda = line.split(";");
                if (busqueda[3].equals(id)) {
                    i++;
                    busqueda[0] = (busqueda[0].replace(busqueda[0], categoria));
                    busqueda[1] = (busqueda[1].replace(busqueda[1], nombreUsuario));
                    busqueda[2] = (busqueda[2].replace(busqueda[2], contrasena));
                    busqueda[3] = (busqueda[3].replace(busqueda[3], id));
                }
                bw.write(busqueda[0] + ';' + busqueda[1] + ';' + busqueda[2] + ';' + busqueda[3] + "\n");
            }
            bw.flush();
            br.close();
            bw.close();
            if (i == 0) {
                JOptionPane.showMessageDialog(null, "\nNo se encontraron datos.");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, date.fecha() + "\nError: " + e);
        }
        fichero.delete();
        fichero_temporal.renameTo(fichero);
    }

    public void eliminarFila() {
        String line;
        BufferedReader br = null;
        BufferedWriter bw = null;
        ArrayList<String> al = new ArrayList<>();
        try {
            br = new BufferedReader(new FileReader(fichero));
            bw = new BufferedWriter(new FileWriter(fichero_temporal));
            while ((line = br.readLine()) != null) {
                String[] tabla = line.split(";");
                al.add(tabla[0] + ";" + tabla[1] + ";" + tabla[2] + ";" + tabla[3] + "\n");
            }
            int i = Integer.parseInt(txtId.getText());
            int confirmado = JOptionPane.showOptionDialog(null,
                    "¿Esta seguro de eliminar los datos?",
                    "Eliminar datos",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, new Object[]{"Si", "No"}, "No");
            switch (confirmado) {
                case JOptionPane.OK_OPTION:
                    al.remove(i);
                    JOptionPane.showMessageDialog(null, "Datos eliminados correctamente");
                    break;
                case JOptionPane.NO_OPTION:
                    JOptionPane.showMessageDialog(null, "No se borrarán los datos");
                    break;
                default:
                    break;
            }
            for (String prueba : al) {
                bw.write(prueba);
            }
            bw.flush();
            br.close();
            bw.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "\nError: " + e);
        }
        fichero.delete();
        fichero_temporal.renameTo(fichero);
    }

    public String modificarFileEntrada() {
        BufferedReader br = null;
        BufferedWriter bw = null;
        String line;
        int i = 0;
        try {
            br = new BufferedReader(new FileReader(fichero));
            bw = new BufferedWriter(new FileWriter(fichero_temporal));
            while ((line = br.readLine()) != null) {
                String[] tabla = line.split(";");
                tabla[0] = (tabla[0].replace(tabla[0], tabla[0]));
                tabla[1] = (tabla[1].replace(tabla[1], tabla[1]));
                tabla[2] = (tabla[2].replace(tabla[2], tabla[2]));
                bw.write(tabla[0] + ';' + tabla[1] + ';' + tabla[2] + ';' + i + "\n");
                i++;
            }
            bw.flush();
            bw.close();
            br.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "\nError: " + e);
        }
        fichero.delete();
        fichero_temporal.renameTo(fichero);
        return " ";
    }


    private void btnSalirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirMenuActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirMenuActionPerformed

    private void btnLimpiarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarMenuActionPerformed
        LimpiarCasillas();
    }//GEN-LAST:event_btnLimpiarMenuActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        NumPersonas();
        LimpiarCasillas();
        MostrarTabla();
        datos();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnGuardarModificacionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarModificacionMenuActionPerformed
        GuardarModificaciones();
        DefaultTableModel model = (DefaultTableModel) this.tablaUsuarios.getModel();
        model.setRowCount(0);
        model.setRowCount(0);
        MostrarTabla();
        LimpiarCasillas();
        datos();
    }//GEN-LAST:event_btnGuardarModificacionMenuActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        GuardarNuevoId();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void tablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaUsuariosMouseClicked
        Seleccionar();
    }//GEN-LAST:event_tablaUsuariosMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (!txtId.getText().equals("")) {
            eliminarFila();
            LimpiarCasillas();
            modificarFileEntrada();
            MostrarTabla();
            datos();
        } else {
            JOptionPane.showMessageDialog(null, "No hay datos seleccionados");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NumPersonas;
    private javax.swing.JMenuItem btnActualizar;
    private javax.swing.JMenuItem btnEliminar;
    private javax.swing.JMenuItem btnGuardar;
    private javax.swing.JMenuItem btnGuardarModificacionMenu;
    private javax.swing.JMenuItem btnLimpiarMenu;
    private javax.swing.JMenu btnMenu;
    private javax.swing.JMenuItem btnSalirMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtContrasena;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombreUsuario;
    // End of variables declaration//GEN-END:variables
}
